group 'me.fru1t.stak'
version '0.1-SNAPSHOT'

apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'
apply plugin: 'application'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'jacoco'

buildscript {
    ext.kotlin_version = '1.2.41'
    ext.ktor_version = '0.9.2'
    ext.junit_version = '1.0.2'
    ext.junit_jupiter_version = '5.0.2'
    ext.dagger_version = '2.16'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junit_version"
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://dl.bintray.com/kotlin/ktor" }
}

dependencies {
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version
    compile group: 'io.ktor', name: 'ktor-server-netty', version: ktor_version
    compile group: 'com.google.guava', name: 'guava', version: '22.0'
    compile group: 'com.google.dagger', name: 'dagger', version: dagger_version

    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit_jupiter_version
    testCompile group: 'com.google.truth', name: 'truth', version: '0.33'
    testCompile group: 'com.nhaarman', name: 'mockito-kotlin', version: '1.5.0'
    testCompile group: 'io.ktor', name: 'ktor-server-test-host', version: ktor_version

    kaptTest "com.google.dagger:dagger-compiler:$dagger_version"

    testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit_jupiter_version
}

junitPlatform {
    platformVersion junit_version
    enableStandardTestTask true
}

jacoco {
    toolVersion = '0.8.1'
    reportsDir = file("$buildDir/reports")
    applyTo junitPlatformTest
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage report."

    reports {
        html.enabled = true
        xml.enabled = true
    }

    classDirectories = fileTree(dir: "$buildDir/classes/kotlin/main")
    sourceDirectories = files(["src/main/kotlin"])
    executionData = files("$buildDir/jacoco/junitPlatformTest.exec")

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(
                    dir: it,
                    excludes: [
                            '**/*_MembersInjector.*',
                            '**/Dagger*Component*.*',
                            '**/Dagger*Subcomponent*.*',
                            '**/*Subcomponent$Builder.*',
                            '**/*Factory.*',
                            '**/*Module.*',
                    ]
            )
        })
    }
}

test {
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/junitPlatformTest.exec")
        includeNoLocationClasses = true
    }
    finalizedBy jacocoTestReport
}

sourceCompatibility = 1.8
mainClassName = "me.fru1t.stak.server.StakServerKt"
compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

idea {
    module {
        sourceDirs += file('build/generated/source/kapt/main')
        generatedSourceDirs += file('build/generated/source/kapt/main')
        testSourceDirs += file('build/generated/source/kapt/test')
    }
}

// Produces a runnable output jar with all dependencies packaged in
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'StakServer',
                'Implementation-Version': version,
                'Main-Class': 'me.fru1t.stak.StakServerKt'
    }
    baseName = project.name
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
